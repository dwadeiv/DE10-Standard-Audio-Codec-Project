
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Audio_Codec(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// Audio //////////
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT

);

// Creating states
parameter Wait_For_Transmit = 4'b0000;
parameter Start_Condition = 4'b0001;
parameter Send_Address = 4'b0010;
parameter ACK_1 = 4'b0011;
parameter Send_Data_1 = 4'b0100;
parameter ACK_2 = 4'b0101;
parameter Send_Data_2 = 4'b0110;
parameter ACK_3 = 4'b0111;
parameter Stop_Condition = 4'b1000;



//=======================================================
//  REG/WIRE declarations
//=======================================================
reg [3:0] next_state;
wire clk;
wire [7:0] Chip_Address;
wire pllClk;

//=======================================================
//  Structural coding
//=======================================================

audio_pll audio_pll(
	.refclk   (CLOCK_50),  
	.rst      (~KEY[0]),  
	.outclk_0 (pllClk)
);


clk_divider clk_divider(CLOCK_50, clk );
I2Cstate I2Cstate(
	.FPGA_I2C_SCLK (FPGA_I2C_SCLK),
	.FPGA_I2C_SDAT (FPGA_I2C_SDAT),
	.clk (clk),
	.reset_n (KEY[0])
);

Digital_Audio_Interface digital_Audio_Interface(
	.reset_n(KEY[0]),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_BCLK(AUD_BCLK)


);

assign AUD_XCK = pllClk;
assign AUD_BCLK = pllClk;



endmodule